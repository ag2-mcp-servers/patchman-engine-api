# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:56:23+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Query

from models import (
    ApiPatchV1ExportAdvisoriesAdvisoryIdSystemsGetResponse,
    ApiPatchV1ExportAdvisoriesGetResponse,
    ApiPatchV1ExportPackagesGetResponse,
    ApiPatchV1ExportPackagesPackageNameSystemsGetResponse,
    ApiPatchV1ExportSystemsGetResponse,
    ApiPatchV1ExportSystemsInventoryIdAdvisoriesGetResponse,
    ApiPatchV1ExportSystemsInventoryIdPackagesGetResponse,
    ControllersAdvisoriesResponse,
    ControllersAdvisoriesSystemsResponse,
    ControllersAdvisoryDetailResponse,
    ControllersAdvisorySystemsResponse,
    ControllersPackageDetailResponse,
    ControllersPackagesResponse,
    ControllersPackageSystemsResponse,
    ControllersPackageVersionsResponse,
    ControllersSystemAdvisoriesResponse,
    ControllersSystemDetailResponse,
    ControllersSystemPackageResponse,
    ControllersSystemsAdvisoriesRequest,
    ControllersSystemsAdvisoriesResponse,
    ControllersSystemsResponse,
    FilterSystemProfileSapSidsIn,
    Sort,
    Sort2,
    Sort4,
    Sort8,
    Sort10,
    Tags,
)

app = MCPProxy(
    contact={},
    description='API of the Patch application on [cloud.redhat.com](cloud.redhat.com)\n\nSyntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)',
    license={'name': 'GPLv3', 'url': 'https://www.gnu.org/licenses/gpl-3.0.en.html'},
    title='Patchman-engine API',
    version='v1.15.3',
    servers=[{'url': 'http://redhat.local'}, {'url': '/'}],
)


@app.get(
    '/api/patch/v1/advisories',
    description=""" Show me all applicable advisories for all my systems """,
    tags=['advisory_management', 'system_advisory_linking'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def list_advisories(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: Optional[Sort] = None,
    search: Optional[str] = None,
    filter_id_: Optional[str] = Query(None, alias='filter[id]'),
    filter_description_: Optional[str] = Query(None, alias='filter[description]'),
    filter_public_date_: Optional[str] = Query(None, alias='filter[public_date]'),
    filter_synopsis_: Optional[str] = Query(None, alias='filter[synopsis]'),
    filter_advisory_type_: Optional[str] = Query(None, alias='filter[advisory_type]'),
    filter_severity_: Optional[str] = Query(None, alias='filter[severity]'),
    filter_applicable_systems_: Optional[str] = Query(
        None, alias='filter[applicable_systems]'
    ),
    tags: Optional[Tags] = None,
    filter_system_profile__sap_system_: Optional[str] = Query(
        None, alias='filter[system_profile][sap_system]'
    ),
    filter_system_profile__sap_sids__in_: Optional[
        FilterSystemProfileSapSidsIn
    ] = Query(None, alias='filter[system_profile][sap_sids][in]'),
):
    """
    Show me all applicable advisories for all my systems
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/advisories/{advisory_id}',
    description=""" Show me details an advisory by given advisory name """,
    tags=['advisory_management', 'system_advisory_linking'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def detail_advisory(advisory_id: str):
    """
    Show me details an advisory by given advisory name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/advisories/{advisory_id}/systems',
    description=""" Show me systems on which the given advisory is applicable """,
    tags=['advisory_management', 'system_advisory_linking'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def list_advisory_systems(
    advisory_id: str,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: Optional[Sort2] = None,
    search: Optional[str] = None,
    filter_id_: Optional[str] = Query(None, alias='filter[id]'),
    filter_insights_id_: Optional[str] = Query(None, alias='filter[insights_id]'),
    filter_display_name_: Optional[str] = Query(None, alias='filter[display_name]'),
    filter_last_evaluation_: Optional[str] = Query(
        None, alias='filter[last_evaluation]'
    ),
    filter_last_upload_: Optional[str] = Query(None, alias='filter[last_upload]'),
    filter_rhsa_count_: Optional[str] = Query(None, alias='filter[rhsa_count]'),
    filter_rhba_count_: Optional[str] = Query(None, alias='filter[rhba_count]'),
    filter_rhea_count_: Optional[str] = Query(None, alias='filter[rhea_count]'),
    filter_other_count_: Optional[str] = Query(None, alias='filter[other_count]'),
    filter_stale_: Optional[str] = Query(None, alias='filter[stale]'),
    filter_stale_timestamp_: Optional[str] = Query(
        None, alias='filter[stale_timestamp]'
    ),
    filter_stale_warning_timestamp_: Optional[str] = Query(
        None, alias='filter[stale_warning_timestamp]'
    ),
    filter_culled_timestamp_: Optional[str] = Query(
        None, alias='filter[culled_timestamp]'
    ),
    filter_created_: Optional[str] = Query(None, alias='filter[created]'),
    tags: Optional[Tags] = None,
    filter_system_profile__sap_system_: Optional[str] = Query(
        None, alias='filter[system_profile][sap_system]'
    ),
    filter_system_profile__sap_sids__in_: Optional[
        FilterSystemProfileSapSidsIn
    ] = Query(None, alias='filter[system_profile][sap_sids][in]'),
):
    """
    Show me systems on which the given advisory is applicable
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/export/advisories',
    description=""" Export applicable advisories for all my systems """,
    tags=['advisory_management', 'system_advisory_linking'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def export_advisories(
    search: Optional[str] = None,
    filter_id_: Optional[str] = Query(None, alias='filter[id]'),
    filter_description_: Optional[str] = Query(None, alias='filter[description]'),
    filter_public_date_: Optional[str] = Query(None, alias='filter[public_date]'),
    filter_synopsis_: Optional[str] = Query(None, alias='filter[synopsis]'),
    filter_advisory_type_: Optional[str] = Query(None, alias='filter[advisory_type]'),
    filter_severity_: Optional[str] = Query(None, alias='filter[severity]'),
    filter_applicable_systems_: Optional[str] = Query(
        None, alias='filter[applicable_systems]'
    ),
):
    """
    Export applicable advisories for all my systems
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/export/advisories/{advisory_id}/systems',
    description=""" Export systems for my account """,
    tags=['advisory_management', 'system_management', 'system_advisory_linking'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def export_advisory_systems(
    advisory_id: str,
    search: Optional[str] = None,
    filter_id_: Optional[str] = Query(None, alias='filter[id]'),
    filter_display_name_: Optional[str] = Query(None, alias='filter[display_name]'),
    filter_last_evaluation_: Optional[str] = Query(
        None, alias='filter[last_evaluation]'
    ),
    filter_last_upload_: Optional[str] = Query(None, alias='filter[last_upload]'),
    filter_rhsa_count_: Optional[str] = Query(None, alias='filter[rhsa_count]'),
    filter_rhba_count_: Optional[str] = Query(None, alias='filter[rhba_count]'),
    filter_rhea_count_: Optional[str] = Query(None, alias='filter[rhea_count]'),
    filter_other_count_: Optional[str] = Query(None, alias='filter[other_count]'),
    filter_stale_: Optional[str] = Query(None, alias='filter[stale]'),
    filter_packages_installed_: Optional[str] = Query(
        None, alias='filter[packages_installed]'
    ),
    filter_packages_updatable_: Optional[str] = Query(
        None, alias='filter[packages_updatable]'
    ),
    filter_system_profile__sap_system_: Optional[str] = Query(
        None, alias='filter[system_profile][sap_system]'
    ),
    filter_system_profile__sap_sids__in_: Optional[
        FilterSystemProfileSapSidsIn
    ] = Query(None, alias='filter[system_profile][sap_sids][in]'),
    tags: Optional[Tags] = None,
):
    """
    Export systems for my account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/export/packages',
    description=""" Show me all installed packages across my systems """,
    tags=['package_management', 'system_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def export_packages(
    sort: Optional[Sort4] = None,
    search: Optional[str] = None,
    filter_name_: Optional[str] = Query(None, alias='filter[name]'),
    filter_systems_installed_: Optional[str] = Query(
        None, alias='filter[systems_installed]'
    ),
    filter_systems_updatable_: Optional[str] = Query(
        None, alias='filter[systems_updatable]'
    ),
    filter_summary_: Optional[str] = Query(None, alias='filter[summary]'),
):
    """
    Show me all installed packages across my systems
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/export/packages/{package_name}/systems',
    description=""" Show me all my systems which have a package installed """,
    tags=['system_management', 'package_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def export_package_systems(
    package_name: str,
    filter_system_profile__sap_system_: Optional[str] = Query(
        None, alias='filter[system_profile][sap_system]'
    ),
    filter_system_profile__sap_sids__in_: Optional[
        FilterSystemProfileSapSidsIn
    ] = Query(None, alias='filter[system_profile][sap_sids][in]'),
    tags: Optional[Tags] = None,
):
    """
    Show me all my systems which have a package installed
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/export/systems',
    description=""" Export systems for my account """,
    tags=['system_management', 'package_management', 'system_advisory_linking'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def export_systems(
    search: Optional[str] = None,
    filter_id_: Optional[str] = Query(None, alias='filter[id]'),
    filter_display_name_: Optional[str] = Query(None, alias='filter[display_name]'),
    filter_last_evaluation_: Optional[str] = Query(
        None, alias='filter[last_evaluation]'
    ),
    filter_last_upload_: Optional[str] = Query(None, alias='filter[last_upload]'),
    filter_rhsa_count_: Optional[str] = Query(None, alias='filter[rhsa_count]'),
    filter_rhba_count_: Optional[str] = Query(None, alias='filter[rhba_count]'),
    filter_rhea_count_: Optional[str] = Query(None, alias='filter[rhea_count]'),
    filter_other_count_: Optional[str] = Query(None, alias='filter[other_count]'),
    filter_stale_: Optional[str] = Query(None, alias='filter[stale]'),
    filter_packages_installed_: Optional[str] = Query(
        None, alias='filter[packages_installed]'
    ),
    filter_packages_updatable_: Optional[str] = Query(
        None, alias='filter[packages_updatable]'
    ),
    filter_system_profile__sap_system_: Optional[str] = Query(
        None, alias='filter[system_profile][sap_system]'
    ),
    filter_system_profile__sap_sids__in_: Optional[
        FilterSystemProfileSapSidsIn
    ] = Query(None, alias='filter[system_profile][sap_sids][in]'),
    tags: Optional[Tags] = None,
):
    """
    Export systems for my account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/export/systems/{inventory_id}/advisories',
    description=""" Export applicable advisories for all my systems """,
    tags=['advisory_management', 'system_advisory_linking'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def export_system_advisories(
    inventory_id: str,
    search: Optional[str] = None,
    filter_id_: Optional[str] = Query(None, alias='filter[id]'),
    filter_description_: Optional[str] = Query(None, alias='filter[description]'),
    filter_public_date_: Optional[str] = Query(None, alias='filter[public_date]'),
    filter_synopsis_: Optional[str] = Query(None, alias='filter[synopsis]'),
    filter_advisory_type_: Optional[str] = Query(None, alias='filter[advisory_type]'),
    filter_severity_: Optional[str] = Query(None, alias='filter[severity]'),
):
    """
    Export applicable advisories for all my systems
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/export/systems/{inventory_id}/packages',
    description=""" Show me details about a system packages by given inventory id """,
    tags=['system_management', 'package_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def export_system_packages(
    inventory_id: str,
    search: Optional[str] = None,
    filter_name_: Optional[str] = Query(None, alias='filter[name]'),
    filter_description_: Optional[str] = Query(None, alias='filter[description]'),
    filter_evra_: Optional[str] = Query(None, alias='filter[evra]'),
    filter_summary_: Optional[str] = Query(None, alias='filter[summary]'),
    filter_updatable_: Optional[bool] = Query(None, alias='filter[updatable]'),
):
    """
    Show me details about a system packages by given inventory id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/packages/',
    description=""" Show me all installed packages across my systems """,
    tags=['package_management', 'system_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def list_packages(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: Optional[Sort4] = None,
    search: Optional[str] = None,
    filter_name_: Optional[str] = Query(None, alias='filter[name]'),
    filter_systems_installed_: Optional[str] = Query(
        None, alias='filter[systems_installed]'
    ),
    filter_systems_updatable_: Optional[str] = Query(
        None, alias='filter[systems_updatable]'
    ),
    filter_summary_: Optional[str] = Query(None, alias='filter[summary]'),
    tags: Optional[Tags] = None,
    filter_system_profile__sap_system_: Optional[str] = Query(
        None, alias='filter[system_profile][sap_system]'
    ),
    filter_system_profile__sap_sids__in_: Optional[
        FilterSystemProfileSapSidsIn
    ] = Query(None, alias='filter[system_profile][sap_sids][in]'),
):
    """
    Show me all installed packages across my systems
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/packages/{package_name}',
    description=""" Show me metadata of selected package """,
    tags=['package_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def latest_package(package_name: str):
    """
    Show me metadata of selected package
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/packages/{package_name}/systems',
    description=""" Show me all my systems which have a package installed """,
    tags=['system_management', 'package_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def package_systems(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    package_name: str = ...,
    tags: Optional[Tags] = None,
    filter_system_profile__sap_system_: Optional[str] = Query(
        None, alias='filter[system_profile][sap_system]'
    ),
    filter_system_profile__sap_sids__in_: Optional[
        FilterSystemProfileSapSidsIn
    ] = Query(None, alias='filter[system_profile][sap_sids][in]'),
):
    """
    Show me all my systems which have a package installed
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/packages/{package_name}/versions',
    description=""" Show me all package versions installed on some system """,
    tags=['package_management', 'system_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def package_versions(
    limit: Optional[int] = None, offset: Optional[int] = None, package_name: str = ...
):
    """
    Show me all package versions installed on some system
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/systems',
    description=""" Show me all my systems """,
    tags=['system_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def list_systems(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: Optional[Sort8] = None,
    search: Optional[str] = None,
    filter_insights_id_: Optional[str] = Query(None, alias='filter[insights_id]'),
    filter_id_: Optional[str] = Query(None, alias='filter[id]'),
    filter_display_name_: Optional[str] = Query(None, alias='filter[display_name]'),
    filter_last_evaluation_: Optional[str] = Query(
        None, alias='filter[last_evaluation]'
    ),
    filter_last_upload_: Optional[str] = Query(None, alias='filter[last_upload]'),
    filter_rhsa_count_: Optional[str] = Query(None, alias='filter[rhsa_count]'),
    filter_rhba_count_: Optional[str] = Query(None, alias='filter[rhba_count]'),
    filter_rhea_count_: Optional[str] = Query(None, alias='filter[rhea_count]'),
    filter_other_count_: Optional[str] = Query(None, alias='filter[other_count]'),
    filter_stale_: Optional[str] = Query(None, alias='filter[stale]'),
    filter_packages_installed_: Optional[str] = Query(
        None, alias='filter[packages_installed]'
    ),
    filter_packages_updatable_: Optional[str] = Query(
        None, alias='filter[packages_updatable]'
    ),
    filter_stale_timestamp_: Optional[str] = Query(
        None, alias='filter[stale_timestamp]'
    ),
    filter_stale_warning_timestamp_: Optional[str] = Query(
        None, alias='filter[stale_warning_timestamp]'
    ),
    filter_culled_timestamp_: Optional[str] = Query(
        None, alias='filter[culled_timestamp]'
    ),
    filter_created_: Optional[str] = Query(None, alias='filter[created]'),
    tags: Optional[Tags] = None,
    filter_system_profile__sap_system_: Optional[str] = Query(
        None, alias='filter[system_profile][sap_system]'
    ),
    filter_system_profile__sap_sids__in_: Optional[
        FilterSystemProfileSapSidsIn
    ] = Query(None, alias='filter[system_profile][sap_sids][in]'),
):
    """
    Show me all my systems
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/patch/v1/systems/{inventory_id}',
    description=""" Delete system by inventory id """,
    tags=['system_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def deletesystem(inventory_id: str):
    """
    Delete system by inventory id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/systems/{inventory_id}',
    description=""" Show me details about a system by given inventory id """,
    tags=['system_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def detail_system(inventory_id: str):
    """
    Show me details about a system by given inventory id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/systems/{inventory_id}/advisories',
    description=""" Show me advisories for a system by given inventory id """,
    tags=['advisory_management', 'system_advisory_linking'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def list_system_advisories(
    inventory_id: str,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: Optional[Sort10] = None,
    search: Optional[str] = None,
    filter_id_: Optional[str] = Query(None, alias='filter[id]'),
    filter_description_: Optional[str] = Query(None, alias='filter[description]'),
    filter_public_date_: Optional[str] = Query(None, alias='filter[public_date]'),
    filter_synopsis_: Optional[str] = Query(None, alias='filter[synopsis]'),
    filter_advisory_type_: Optional[str] = Query(None, alias='filter[advisory_type]'),
    filter_severity_: Optional[str] = Query(None, alias='filter[severity]'),
):
    """
    Show me advisories for a system by given inventory id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/patch/v1/systems/{inventory_id}/packages',
    description=""" Show me details about a system packages by given inventory id """,
    tags=['system_management', 'package_management'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def system_packages(
    inventory_id: str,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    search: Optional[str] = None,
    filter_name_: Optional[str] = Query(None, alias='filter[name]'),
    filter_description_: Optional[str] = Query(None, alias='filter[description]'),
    filter_evra_: Optional[str] = Query(None, alias='filter[evra]'),
    filter_summary_: Optional[str] = Query(None, alias='filter[summary]'),
    filter_updatable_: Optional[bool] = Query(None, alias='filter[updatable]'),
):
    """
    Show me details about a system packages by given inventory id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patch/v1/views/advisories/systems',
    description=""" View advisory-system pairs for selected systems and advisories """,
    tags=['advisory_management', 'system_advisory_linking'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def view_advisories_systems(body: ControllersSystemsAdvisoriesRequest):
    """
    View advisory-system pairs for selected systems and advisories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/patch/v1/views/systems/advisories',
    description=""" View system-advisory pairs for selected systems and advisories """,
    tags=['advisory_management', 'system_management', 'system_advisory_linking'],
    security=[
        APIKeyHeader(name="x-rh-identity"),
    ],
)
def view_systems_advisories(body: ControllersSystemsAdvisoriesRequest):
    """
    View system-advisory pairs for selected systems and advisories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
